<<<<<<< HEAD
import { ErrorResponse } from "@walletconnect/jsonrpc-types";
import { AppMetadata, BlockchainTypes, JsonRpcPermissions, NotificationPermissions, SequenceTypes, PairingTypes, SessionTypes, Validation, SignalTypes, StoreEvent } from "@walletconnect/types";
export declare function isSignalTypePairing(signal: SignalTypes.Base): signal is SignalTypes.Pairing;
export declare function isSignalTypeUri(signal: SignalTypes.Base): signal is SignalTypes.Uri;
export declare function isSequenceRespondedStatus(status: SequenceTypes.PendingStatus): status is SequenceTypes.RespondedStatus;
export declare function isSequenceResponded(pending: SequenceTypes.Pending): pending is SequenceTypes.RespondedPending;
export declare function isSequenceRejected(response: SequenceTypes.Response): response is SequenceTypes.Rejection;
export declare function isSequenceFailed(outcome: SequenceTypes.Outcome): outcome is SequenceTypes.Failed;
export declare function isPairingRespondedStatus(status: PairingTypes.PendingStatus): status is PairingTypes.RespondedStatus;
export declare function isPairingResponded(pending: PairingTypes.Pending): pending is PairingTypes.RespondedPending;
export declare function isPairingRejected(response: PairingTypes.Response): response is PairingTypes.Rejection;
export declare function isPairingFailed(outcome: PairingTypes.Outcome): outcome is PairingTypes.Failed;
export declare function isSessionRespondedStatus(status: SessionTypes.PendingStatus): status is SessionTypes.RespondedStatus;
export declare function isSessionResponded(pending: SessionTypes.Pending): pending is SessionTypes.RespondedPending;
export declare function isSessionRejected(response: SessionTypes.Response): response is SessionTypes.Rejection;
export declare function isSessionFailed(outcome: SessionTypes.Outcome): outcome is SessionTypes.Failed;
export declare function isStoreUpdatedEvent<T = any>(event: StoreEvent.Created<T> | StoreEvent.Updated<T>): event is StoreEvent.Updated<T>;
export declare function validateSessionProposeParamsPermissions(permissions: SessionTypes.ProposedPermissions): Validation.Result;
export declare function validateSessionProposeParamsMetadata(metadata: AppMetadata): Validation.Result;
export declare function validateSessionProposeParams(params: SessionTypes.ProposeParams): Validation.Result;
export declare function validateSessionRespondParams(params: SessionTypes.RespondParams): Validation.Result;
export declare function validateBlockchainPermissions(blockchain?: BlockchainTypes.Permissions): Validation.Result;
export declare function validateJsonRpcPermissions(jsonrpc?: JsonRpcPermissions): Validation.Result;
export declare function validateNotificationPermissions(notifications: NotificationPermissions): Validation.Result;
export declare function validateBlockchainState(state?: BlockchainTypes.State, blockchain?: BlockchainTypes.Permissions): Validation.Result;
export declare function isValidArray(arr: any, itemCondition?: (item: any) => boolean): boolean;
export declare function isValidString(value: any): boolean;
export declare function isValidChainId(value: any): boolean;
export declare function isValidAccountId(value: any): boolean;
export declare function isValidUrl(value: any): boolean;
export declare function isValidationInvalid(validation: Validation.Result): validation is Validation.Invalid;
export declare function formatValidResult(): Validation.Valid;
export declare function formatInvalidResult(error: ErrorResponse): Validation.Invalid;
=======
import { IJsonRpcSubscription, IJsonRpcRequest, IJsonRpcResponseSuccess, IJsonRpcResponseError, IInternalEvent } from "@walletconnect/types";
export declare function isEmptyString(value: string): boolean;
export declare function isEmptyArray(array: any[]): boolean;
export declare function isBuffer(val: any): boolean;
export declare function isTypedArray(val: any): boolean;
export declare function isArrayBuffer(val: any): boolean;
export declare function getType(val: any): "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function" | "buffer" | "array" | "typed-array" | "array-buffer";
export declare function getEncoding(val: any): "hex" | "utf8" | "binary";
export declare function isHexString(value: any, length?: number): boolean;
export declare function isJsonRpcSubscription(object: any): object is IJsonRpcSubscription;
export declare function isJsonRpcRequest(object: any): object is IJsonRpcRequest;
export declare function isJsonRpcResponseSuccess(object: any): object is IJsonRpcResponseSuccess;
export declare function isJsonRpcResponseError(object: any): object is IJsonRpcResponseError;
export declare function isInternalEvent(object: any): object is IInternalEvent;
export declare function isReservedEvent(event: string): boolean;
export declare function isSilentPayload(request: IJsonRpcRequest): boolean;
>>>>>>> web3-setup
//# sourceMappingURL=validators.d.ts.map