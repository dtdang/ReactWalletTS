/// <reference types="node" />
import { EventEmitter } from "events";
import { Logger } from "pino";
import { IClient, IStore, Reason } from "@walletconnect/types";
export declare class Store<Sequence = any> extends IStore<Sequence> {
    client: IClient;
    logger: Logger;
    name: string;
    sequences: Map<string, Sequence>;
    events: EventEmitter;
    private cached;
    constructor(client: IClient, logger: Logger, name: string);
    init(): Promise<void>;
    get context(): string;
    get length(): number;
    get topics(): string[];
    get values(): Sequence[];
    set(topic: string, sequence: Sequence): Promise<void>;
    get(topic: string): Promise<Sequence>;
    update(topic: string, update: Partial<Sequence>): Promise<void>;
    delete(topic: string, reason: Reason): Promise<void>;
    on(event: string, listener: any): void;
    once(event: string, listener: any): void;
    off(event: string, listener: any): void;
    removeListener(event: string, listener: any): void;
    private getSequence;
    private persist;
    private restore;
    private initialize;
    private reset;
    private onInit;
    private isInitialized;
    private registerEventListeners;
}
//# sourceMappingURL=store.d.ts.map