/// <reference types="node" />
import { EventEmitter } from "events";
import { Logger } from "pino";
import { ISubscriber, ISubscriberTopicMap, SubscriberTypes, RelayerTypes, IRelayer } from "@walletconnect/types";
export declare class SubscriberTopicMap implements ISubscriberTopicMap {
    map: Map<string, string[]>;
    get topics(): string[];
    set(topic: string, id: string): void;
    get(topic: string): string[];
    exists(topic: string, id: string): boolean;
    delete(topic: string, id?: string): void;
    clear(): void;
}
export declare class Subscriber extends ISubscriber {
    relayer: IRelayer;
    logger: Logger;
    subscriptions: Map<string, SubscriberTypes.Active>;
    topicMap: SubscriberTopicMap;
    events: EventEmitter;
    name: string;
    pending: Map<string, SubscriberTypes.Params>;
    private cached;
    constructor(relayer: IRelayer, logger: Logger);
    init(): Promise<void>;
    get context(): string;
    get length(): number;
    get ids(): string[];
    get values(): SubscriberTypes.Active[];
    get topics(): string[];
    subscribe(topic: string, opts?: RelayerTypes.SubscribeOptions): Promise<string>;
    unsubscribe(topic: string, opts?: RelayerTypes.UnsubscribeOptions): Promise<void>;
    on(event: string, listener: any): void;
    once(event: string, listener: any): void;
    off(event: string, listener: any): void;
    removeListener(event: string, listener: any): void;
    private enable;
    private disable;
    private hasSubscription;
    private onEnable;
    private onDisable;
    private unsubscribeByTopic;
    private unsubscribeById;
    private rpcSubscribe;
    private rpcUnsubscribe;
    private onSubscribe;
    private onResubscribe;
    private onUnsubscribe;
    private setSubscription;
    private addSubscription;
    private getSubscription;
    private deleteSubscription;
    private persist;
    private restore;
    private initialize;
    private isEnabled;
    private reset;
    private resubscribe;
    private onConnect;
    private onDisconnect;
    private checkPending;
    private registerEventListeners;
}
//# sourceMappingURL=subscriber.d.ts.map