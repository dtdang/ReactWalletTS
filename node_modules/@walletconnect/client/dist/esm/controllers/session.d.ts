/// <reference types="node" />
import { EventEmitter } from "events";
import { Logger } from "pino";
import { IClient, ISession, SequenceTypes, SessionTypes } from "@walletconnect/types";
import { JsonRpcPayload } from "@walletconnect/jsonrpc-utils";
import { Store } from "./store";
import { JsonRpcHistory } from "./history";
import { Expirer } from "./expirer";
export declare class Session extends ISession {
    client: IClient;
    logger: Logger;
    pending: Store<SessionTypes.Pending>;
    settled: Store<SessionTypes.Settled>;
    history: JsonRpcHistory;
    expirer: Expirer;
    events: EventEmitter;
    name: string;
    config: {
        status: {
            proposed: "proposed";
            responded: "responded";
            pending: string;
            settled: string;
        };
        events: SequenceTypes.Events;
        jsonrpc: SequenceTypes.JsonRpc;
    };
    engine: SessionTypes.Engine;
    constructor(client: IClient, logger: Logger);
    init(): Promise<void>;
    get(topic: string): Promise<SessionTypes.Settled>;
    find(permissions: Partial<SessionTypes.Permissions>): Promise<SessionTypes.Settled[]>;
    ping(topic: string, timeout?: number): Promise<void>;
    send(topic: string, payload: JsonRpcPayload, chainId?: string): Promise<void>;
    get context(): string;
    get length(): number;
    get topics(): string[];
    get values(): SessionTypes.Settled[];
    create(params?: SessionTypes.CreateParams): Promise<SessionTypes.Settled>;
    respond(params: SessionTypes.RespondParams): Promise<SessionTypes.Pending>;
    update(params: SessionTypes.UpdateParams): Promise<SessionTypes.Settled>;
    upgrade(params: SessionTypes.UpgradeParams): Promise<SessionTypes.Settled>;
    extend(params: SessionTypes.ExtendParams): Promise<SessionTypes.Settled>;
    request(params: SessionTypes.RequestParams): Promise<any>;
    delete(params: SessionTypes.DeleteParams): Promise<void>;
    notify(params: SessionTypes.NotificationEvent): Promise<void>;
    on(event: string, listener: any): void;
    once(event: string, listener: any): void;
    off(event: string, listener: any): void;
    removeListener(event: string, listener: any): void;
    mergeUpdate(topic: string, update: SessionTypes.Update): Promise<{
        accounts: string[];
    }>;
    mergeUpgrade(topic: string, upgrade: SessionTypes.Upgrade): Promise<{
        jsonrpc: {
            methods: any[];
        };
        notifications: {
            types: any[];
        };
        blockchain: {
            chains: any[];
        };
        controller: import("@walletconnect/types").CryptoTypes.Participant;
    }>;
    mergeExtension(topic: string, extension: SessionTypes.Extension): Promise<SequenceTypes.Extension>;
    validateRespond(params?: SessionTypes.RespondParams): Promise<void>;
    validateRequest(params?: SessionTypes.RequestParams): Promise<void>;
    validatePropose(params?: SessionTypes.ProposeParams): Promise<void>;
    getDefaultSignal(params: SessionTypes.DefaultSignalParams): Promise<import("@walletconnect/types").SignalTypes.Pairing>;
    getDefaultTTL(): Promise<number>;
    getDefaultPermissions(): Promise<{
        jsonrpc: {
            methods: never[];
        };
        notifications: {
            types: never[];
        };
        blockchain: {
            chains: never[];
        };
    }>;
}
//# sourceMappingURL=session.d.ts.map