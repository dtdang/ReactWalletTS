import pino from "pino";
import { EventEmitter } from "events";
import { IHeartBeat } from "@walletconnect/types";
import { HEARTBEAT_INTERVAL, HEARTBEAT_EVENTS, HEARTBEAT_CONTEXT, HEARTBEAT_DEFAULT_LOGGER, } from "../constants";
import { generateChildLogger, getDefaultLoggerOptions, getLoggerContext, } from "@walletconnect/logger";
import { toMiliseconds } from "@walletconnect/utils";
export class HeartBeat extends IHeartBeat {
    constructor(opts) {
        super(opts);
        this.events = new EventEmitter();
        this.interval = HEARTBEAT_INTERVAL;
        this.name = HEARTBEAT_CONTEXT;
        this.logger =
            typeof (opts === null || opts === void 0 ? void 0 : opts.logger) !== "undefined" && typeof (opts === null || opts === void 0 ? void 0 : opts.logger) !== "string"
                ? generateChildLogger(opts.logger, this.name)
                : pino(getDefaultLoggerOptions({ level: (opts === null || opts === void 0 ? void 0 : opts.logger) || HEARTBEAT_DEFAULT_LOGGER }));
        this.interval = (opts === null || opts === void 0 ? void 0 : opts.interval) || HEARTBEAT_INTERVAL;
    }
    static async init(opts) {
        const heartbeat = new HeartBeat(opts);
        await heartbeat.init();
        return heartbeat;
    }
    get context() {
        return getLoggerContext(this.logger);
    }
    async init() {
        this.logger.trace(`Initialized`);
        await this.initialize();
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.once(event, listener);
    }
    off(event, listener) {
        this.events.off(event, listener);
    }
    removeListener(event, listener) {
        this.events.removeListener(event, listener);
    }
    async initialize() {
        setInterval(() => this.pulse(), toMiliseconds(this.interval));
        this.logger.trace(`Initialized`);
    }
    pulse() {
        this.events.emit(HEARTBEAT_EVENTS.pulse);
    }
}
//# sourceMappingURL=heartbeat.js.map