/// <reference types="node" />
import { EventEmitter } from "events";
import { Logger } from "pino";
import { IClient, IExpirer, Expiration } from "@walletconnect/types";
export declare class Expirer extends IExpirer {
    client: IClient;
    logger: Logger;
    expirations: Map<string, Expiration>;
    events: EventEmitter;
    name: string;
    private cached;
    constructor(client: IClient, logger: Logger);
    get context(): string;
    get length(): number;
    get topics(): string[];
    get values(): Expiration[];
    init(): Promise<void>;
    has(topic: string): Promise<boolean>;
    set(topic: string, expiration: Expiration): Promise<void>;
    get(topic: string): Promise<Expiration>;
    del(topic: string): Promise<void>;
    on(event: string, listener: any): void;
    once(event: string, listener: any): void;
    off(event: string, listener: any): void;
    removeListener(event: string, listener: any): void;
    private persist;
    private restore;
    private initialize;
    private reset;
    private onInit;
    private isInitialized;
    private getExpiration;
    private checkExpiry;
    private expire;
    private checkExpirations;
    private registerEventListeners;
}
//# sourceMappingURL=expirer.d.ts.map