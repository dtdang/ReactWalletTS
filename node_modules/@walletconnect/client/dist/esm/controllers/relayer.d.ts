/// <reference types="node" />
import { EventEmitter } from "events";
import { Logger } from "pino";
import { RelayerTypes, IRelayer, ISubscriber, IJsonRpcHistory, IHeartBeat, IRelayerEncoder, RelayerOptions, IRelayerStorage } from "@walletconnect/types";
import { IJsonRpcProvider, JsonRpcPayload } from "@walletconnect/jsonrpc-utils";
import { IPublisher } from "./publisher";
export declare class Relayer extends IRelayer {
    readonly protocol = "irn";
    readonly version = 1;
    logger: Logger;
    storage: IRelayerStorage;
    heartbeat: IHeartBeat;
    encoder: IRelayerEncoder;
    events: EventEmitter;
    provider: IJsonRpcProvider;
    history: IJsonRpcHistory;
    subscriber: ISubscriber;
    publisher: IPublisher;
    name: string;
    constructor(opts?: RelayerOptions);
    get context(): string;
    get connected(): boolean;
    get connecting(): boolean;
    init(): Promise<void>;
    publish(topic: string, payload: JsonRpcPayload, opts?: RelayerTypes.PublishOptions): Promise<void>;
    subscribe(topic: string, opts?: RelayerTypes.SubscribeOptions): Promise<string>;
    unsubscribe(topic: string, opts?: RelayerTypes.UnsubscribeOptions): Promise<void>;
    on(event: string, listener: any): void;
    once(event: string, listener: any): void;
    off(event: string, listener: any): void;
    removeListener(event: string, listener: any): void;
    private recordPayloadEvent;
    private shouldIgnorePayloadEvent;
    private onPayload;
    private acknowledgePayload;
    private registerEventListeners;
}
//# sourceMappingURL=relayer.d.ts.map