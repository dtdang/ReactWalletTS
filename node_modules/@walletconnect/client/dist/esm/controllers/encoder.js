import * as encoding from "@walletconnect/encoding";
import { generateChildLogger, getLoggerContext } from "@walletconnect/logger";
import { safeJsonParse, safeJsonStringify } from "@walletconnect/safe-json";
import { ENCODER_CONTEXT } from "../constants";
export class Encoder {
    constructor(client, logger) {
        this.client = client;
        this.logger = logger;
        this.name = ENCODER_CONTEXT;
        this.client = client;
        this.logger = generateChildLogger(logger, this.name);
    }
    get context() {
        return getLoggerContext(this.logger);
    }
    async encode(topic, payload) {
        const message = safeJsonStringify(payload);
        const hasKeys = await this.client.crypto.hasKeys(topic);
        const result = hasKeys
            ? await this.client.crypto.encrypt(topic, message)
            : encoding.utf8ToHex(message);
        return result;
    }
    async decode(topic, encrypted) {
        const hasKeys = await this.client.crypto.hasKeys(topic);
        const message = hasKeys
            ? await this.client.crypto.decrypt(topic, encrypted)
            : encoding.hexToUtf8(encrypted);
        const payload = safeJsonParse(message);
        return payload;
    }
}
export class RelayerEncoder {
    async encode(topic, payload) {
        return encoding.utf8ToHex(safeJsonStringify(payload));
    }
    async decode(topic, message) {
        return safeJsonParse(encoding.hexToUtf8(message));
    }
}
//# sourceMappingURL=encoder.js.map