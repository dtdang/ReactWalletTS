import { EventEmitter } from "events";
import { ISubscriber, } from "@walletconnect/types";
import { ERROR, formatMessageContext, getRelayProtocolName, getRelayProtocolApi, } from "@walletconnect/utils";
import { generateChildLogger, getLoggerContext } from "@walletconnect/logger";
import { SUBSCRIBER_CONTEXT, SUBSCRIBER_EVENTS, RELAYER_PROVIDER_EVENTS, HEARTBEAT_EVENTS, } from "../constants";
export class SubscriberTopicMap {
    constructor() {
        this.map = new Map();
    }
    get topics() {
        return Array.from(this.map.keys());
    }
    set(topic, id) {
        const ids = this.get(topic);
        if (this.exists(topic, id))
            return;
        this.map.set(topic, [...ids, id]);
    }
    get(topic) {
        const ids = this.map.get(topic);
        return ids || [];
    }
    exists(topic, id) {
        const ids = this.get(topic);
        return ids.includes(id);
    }
    delete(topic, id) {
        if (typeof id === "undefined") {
            this.map.delete(topic);
            return;
        }
        if (!this.map.has(topic))
            return;
        const ids = this.get(topic);
        if (!this.exists(topic, id))
            return;
        const remaining = ids.filter(x => x !== id);
        if (!remaining.length) {
            this.map.delete(topic);
            return;
        }
        this.map.set(topic, remaining);
    }
    clear() {
        this.map.clear();
    }
}
export class Subscriber extends ISubscriber {
    constructor(relayer, logger) {
        super(relayer, logger);
        this.relayer = relayer;
        this.logger = logger;
        this.subscriptions = new Map();
        this.topicMap = new SubscriberTopicMap();
        this.events = new EventEmitter();
        this.name = SUBSCRIBER_CONTEXT;
        this.pending = new Map();
        this.cached = [];
        this.relayer = relayer;
        this.logger = generateChildLogger(logger, this.name);
        this.registerEventListeners();
    }
    async init() {
        this.logger.trace(`Initialized`);
        await this.initialize();
    }
    get context() {
        return getLoggerContext(this.logger);
    }
    get length() {
        return this.subscriptions.size;
    }
    get ids() {
        return Array.from(this.subscriptions.keys());
    }
    get values() {
        return Array.from(this.subscriptions.values());
    }
    get topics() {
        return this.topicMap.topics;
    }
    async subscribe(topic, opts) {
        this.logger.debug(`Subscribing Topic`);
        this.logger.trace({ type: "method", method: "subscribe", params: { topic, opts } });
        try {
            const relay = getRelayProtocolName(opts);
            const params = { topic, relay };
            this.pending.set(topic, params);
            const id = await this.rpcSubscribe(topic, relay);
            await this.onSubscribe(id, params);
            this.logger.debug(`Successfully Subscribed Topic`);
            this.logger.trace({ type: "method", method: "subscribe", params: { topic, opts } });
            return id;
        }
        catch (e) {
            this.logger.debug(`Failed to Subscribe Topic`);
            this.logger.error(e);
            throw e;
        }
    }
    async unsubscribe(topic, opts) {
        if (typeof (opts === null || opts === void 0 ? void 0 : opts.id) !== "undefined") {
            await this.unsubscribeById(topic, opts.id, opts);
        }
        else {
            await this.unsubscribeByTopic(topic, opts);
        }
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.once(event, listener);
    }
    off(event, listener) {
        this.events.off(event, listener);
    }
    removeListener(event, listener) {
        this.events.removeListener(event, listener);
    }
    async enable() {
        if (!this.cached.length)
            return;
        this.onEnable();
    }
    async disable() {
        if (this.cached.length)
            return;
        this.onDisable();
    }
    async hasSubscription(id, topic) {
        await this.isEnabled();
        let result = false;
        try {
            const subscription = await this.getSubscription(id);
            result = subscription.topic === topic;
        }
        catch (e) {
        }
        return result;
    }
    onEnable() {
        this.cached = [];
        this.events.emit(SUBSCRIBER_EVENTS.enabled);
    }
    onDisable() {
        this.cached = this.values;
        this.subscriptions.clear();
        this.topicMap.clear();
        this.events.emit(SUBSCRIBER_EVENTS.disabled);
    }
    async unsubscribeByTopic(topic, opts) {
        const ids = this.topicMap.get(topic);
        await Promise.all(ids.map(async (id) => await this.unsubscribeById(topic, id, opts)));
    }
    async unsubscribeById(topic, id, opts) {
        this.logger.debug(`Unsubscribing Topic`);
        this.logger.trace({ type: "method", method: "unsubscribe", params: { topic, id, opts } });
        try {
            const relay = getRelayProtocolName(opts);
            await this.rpcUnsubscribe(topic, id, relay);
            const reason = ERROR.DELETED.format({ context: formatMessageContext(this.context) });
            await this.onUnsubscribe(topic, id, reason);
            this.logger.debug(`Successfully Unsubscribed Topic`);
            this.logger.trace({ type: "method", method: "unsubscribe", params: { topic, id, opts } });
        }
        catch (e) {
            this.logger.debug(`Failed to Unsubscribe Topic`);
            this.logger.error(e);
            throw e;
        }
    }
    async rpcSubscribe(topic, relay) {
        const api = getRelayProtocolApi(relay.protocol);
        const request = {
            method: api.subscribe,
            params: {
                topic,
            },
        };
        this.logger.debug(`Outgoing Relay Payload`);
        this.logger.trace({ type: "payload", direction: "outgoing", request });
        return this.relayer.provider.request(request);
    }
    async rpcUnsubscribe(topic, id, relay) {
        const api = getRelayProtocolApi(relay.protocol);
        const request = {
            method: api.unsubscribe,
            params: {
                topic,
                id,
            },
        };
        this.logger.debug(`Outgoing Relay Payload`);
        this.logger.trace({ type: "payload", direction: "outgoing", request });
        return this.relayer.provider.request(request);
    }
    async onSubscribe(id, params) {
        await this.setSubscription(id, Object.assign(Object.assign({}, params), { id }));
        this.pending.delete(params.topic);
    }
    async onResubscribe(id, params) {
        await this.addSubscription(id, Object.assign(Object.assign({}, params), { id }));
        this.pending.delete(params.topic);
    }
    async onUnsubscribe(topic, id, reason) {
        this.events.removeAllListeners(id);
        if (await this.hasSubscription(id, topic)) {
            await this.deleteSubscription(id, reason);
        }
        await this.relayer.history.delete(topic);
    }
    async setSubscription(id, subscription) {
        await this.isEnabled();
        if (this.subscriptions.has(id))
            return;
        this.logger.debug(`Setting subscription`);
        this.logger.trace({ type: "method", method: "setSubscription", id, subscription });
        await this.addSubscription(id, subscription);
    }
    async addSubscription(id, subscription) {
        this.subscriptions.set(id, Object.assign({}, subscription));
        this.topicMap.set(subscription.topic, id);
        this.events.emit(SUBSCRIBER_EVENTS.created, subscription);
    }
    async getSubscription(id) {
        await this.isEnabled();
        this.logger.debug(`Getting subscription`);
        this.logger.trace({ type: "method", method: "getSubscription", id });
        const subscription = this.subscriptions.get(id);
        if (!subscription) {
            const error = ERROR.NO_MATCHING_ID.format({
                context: formatMessageContext(this.context),
                id,
            });
            throw new Error(error.message);
        }
        return subscription;
    }
    async deleteSubscription(id, reason) {
        await this.isEnabled();
        this.logger.debug(`Deleting subscription`);
        this.logger.trace({ type: "method", method: "deleteSubscription", id, reason });
        const subscription = await this.getSubscription(id);
        this.subscriptions.delete(id);
        this.topicMap.delete(subscription.topic, id);
        this.events.emit(SUBSCRIBER_EVENTS.deleted, Object.assign(Object.assign({}, subscription), { reason }));
    }
    async persist() {
        await this.relayer.storage.setRelayerSubscriptions(this.context, this.values);
        this.events.emit(SUBSCRIBER_EVENTS.sync);
    }
    async restore() {
        try {
            const persisted = await this.relayer.storage.getRelayerSubscriptions(this.context);
            if (typeof persisted === "undefined")
                return;
            if (!persisted.length)
                return;
            if (this.subscriptions.size) {
                const error = ERROR.RESTORE_WILL_OVERRIDE.format({
                    context: formatMessageContext(this.context),
                });
                this.logger.error(error.message);
                throw new Error(error.message);
            }
            this.cached = persisted;
            this.logger.debug(`Successfully Restored subscriptions for ${formatMessageContext(this.context)}`);
            this.logger.trace({ type: "method", method: "restore", subscriptions: this.values });
        }
        catch (e) {
            this.logger.debug(`Failed to Restore subscriptions for ${formatMessageContext(this.context)}`);
            this.logger.error(e);
        }
    }
    async initialize() {
        await this.restore();
        await this.reset();
        await this.enable();
    }
    async isEnabled() {
        if (!this.cached.length)
            return;
        return new Promise(resolve => {
            this.events.once(SUBSCRIBER_EVENTS.enabled, () => resolve());
        });
    }
    async reset() {
        if (!this.cached.length)
            return;
        await Promise.all(this.cached.map(async (subscription) => this.resubscribe(subscription)));
    }
    async resubscribe(subscription) {
        const { topic, relay } = subscription;
        const params = { topic, relay };
        this.pending.set(params.topic, params);
        const id = await this.rpcSubscribe(params.topic, params.relay);
        await this.onResubscribe(id, params);
        if (this.ids.includes(subscription.id)) {
            const reason = ERROR.RESUBSCRIBED.format({ topic: subscription.topic });
            await this.deleteSubscription(subscription.id, reason);
        }
    }
    async onConnect() {
        await this.reset();
        await this.enable();
    }
    async onDisconnect() {
        await this.disable();
    }
    checkPending() {
        this.pending.forEach(async (params) => {
            const id = await this.rpcSubscribe(params.topic, params.relay);
            await this.onSubscribe(id, params);
        });
    }
    registerEventListeners() {
        this.relayer.heartbeat.on(HEARTBEAT_EVENTS.pulse, () => {
            this.checkPending();
        });
        this.relayer.provider.on(RELAYER_PROVIDER_EVENTS.connect, async () => {
            await this.onConnect();
        });
        this.relayer.provider.on(RELAYER_PROVIDER_EVENTS.disconnect, async () => {
            await this.onDisconnect();
        });
        this.events.on(SUBSCRIBER_EVENTS.created, async (createdEvent) => {
            const eventName = SUBSCRIBER_EVENTS.created;
            this.logger.info(`Emitting ${eventName}`);
            this.logger.debug({ type: "event", event: eventName, data: createdEvent });
            await this.persist();
        });
        this.events.on(SUBSCRIBER_EVENTS.deleted, async (deletedEvent) => {
            const eventName = SUBSCRIBER_EVENTS.deleted;
            this.logger.info(`Emitting ${eventName}`);
            this.logger.debug({ type: "event", event: eventName, data: deletedEvent });
            await this.persist();
        });
    }
}
//# sourceMappingURL=subscriber.js.map