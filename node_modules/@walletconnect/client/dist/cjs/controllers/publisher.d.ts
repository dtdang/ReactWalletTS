/// <reference types="node" />
import { EventEmitter } from "events";
import { Logger } from "pino";
import { IRelayer, PublisherTypes, RelayerTypes } from "@walletconnect/types";
import { IEvents, JsonRpcPayload } from "@walletconnect/jsonrpc-types";
export declare abstract class IPublisher extends IEvents {
    relayer: IRelayer;
    logger: Logger;
    abstract name: string;
    abstract readonly context: string;
    constructor(relayer: IRelayer, logger: Logger);
    abstract init(): Promise<void>;
    abstract publish(topic: string, payload: JsonRpcPayload, opts?: RelayerTypes.PublishOptions): Promise<void>;
}
export declare class Publisher extends IPublisher {
    relayer: IRelayer;
    logger: Logger;
    events: EventEmitter;
    name: string;
    queue: Map<number, PublisherTypes.Params>;
    constructor(relayer: IRelayer, logger: Logger);
    get context(): string;
    init(): Promise<void>;
    publish(topic: string, payload: JsonRpcPayload, opts?: RelayerTypes.PublishOptions): Promise<void>;
    on(event: string, listener: any): void;
    once(event: string, listener: any): void;
    off(event: string, listener: any): void;
    removeListener(event: string, listener: any): void;
    private initialize;
    private rpcPublish;
    private onPublish;
    private checkQueue;
    private registerEventListeners;
}
//# sourceMappingURL=publisher.d.ts.map