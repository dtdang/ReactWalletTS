"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelayerEncoder = exports.Encoder = void 0;
const tslib_1 = require("tslib");
const encoding = tslib_1.__importStar(require("@walletconnect/encoding"));
const logger_1 = require("@walletconnect/logger");
const safe_json_1 = require("@walletconnect/safe-json");
const constants_1 = require("../constants");
class Encoder {
    constructor(client, logger) {
        this.client = client;
        this.logger = logger;
        this.name = constants_1.ENCODER_CONTEXT;
        this.client = client;
        this.logger = logger_1.generateChildLogger(logger, this.name);
    }
    get context() {
        return logger_1.getLoggerContext(this.logger);
    }
    encode(topic, payload) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const message = safe_json_1.safeJsonStringify(payload);
            const hasKeys = yield this.client.crypto.hasKeys(topic);
            const result = hasKeys
                ? yield this.client.crypto.encrypt(topic, message)
                : encoding.utf8ToHex(message);
            return result;
        });
    }
    decode(topic, encrypted) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const hasKeys = yield this.client.crypto.hasKeys(topic);
            const message = hasKeys
                ? yield this.client.crypto.decrypt(topic, encrypted)
                : encoding.hexToUtf8(encrypted);
            const payload = safe_json_1.safeJsonParse(message);
            return payload;
        });
    }
}
exports.Encoder = Encoder;
class RelayerEncoder {
    encode(topic, payload) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return encoding.utf8ToHex(safe_json_1.safeJsonStringify(payload));
        });
    }
    decode(topic, message) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return safe_json_1.safeJsonParse(encoding.hexToUtf8(message));
        });
    }
}
exports.RelayerEncoder = RelayerEncoder;
//# sourceMappingURL=encoder.js.map