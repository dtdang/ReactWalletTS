import { Logger } from "pino";
import { IKeyValueStorage } from "keyvaluestorage";
import { IStorage, JsonRpcRecord, StorageKeyMap, SubscriberTypes, StorageConfig, IBaseStorage, IRelayerStorage, Expiration } from "@walletconnect/types";
export declare class BaseStorage implements IBaseStorage {
    logger: Logger;
    keyValueStorage: IKeyValueStorage;
    config: StorageConfig;
    name: string;
    version: string;
    keyMap: StorageKeyMap;
    constructor(logger: Logger, keyValueStorage: IKeyValueStorage, config: StorageConfig);
    get context(): string;
    get prefix(): string;
    getStorageKey(context: string): string;
    getStorageKeyName(context: string): string;
    isValidStorageKeyName(name: string): boolean;
}
export declare class RelayerStorage extends BaseStorage implements IRelayerStorage {
    logger: Logger;
    keyValueStorage: IKeyValueStorage;
    config: StorageConfig;
    constructor(logger: Logger, keyValueStorage: IKeyValueStorage, config: StorageConfig);
    setJsonRpcRecords(context: string, records: JsonRpcRecord[]): Promise<void>;
    getJsonRpcRecords(context: string): Promise<JsonRpcRecord[] | undefined>;
    setRelayerSubscriptions(context: string, subscriptions: SubscriberTypes.Active[]): Promise<void>;
    getRelayerSubscriptions(context: string): Promise<SubscriberTypes.Active[] | undefined>;
}
export declare class Storage extends RelayerStorage implements IStorage {
    logger: Logger;
    keyValueStorage: IKeyValueStorage;
    config: StorageConfig;
    constructor(logger: Logger, keyValueStorage: IKeyValueStorage, config: StorageConfig);
    setKeyChain(context: string, keychain: Map<string, string>): Promise<void>;
    getKeyChain(context: string): Promise<Map<string, string> | undefined>;
    setSequenceStore<Sequence = any>(context: string, sequences: Sequence[]): Promise<void>;
    getSequenceStore<Sequence = any>(context: string): Promise<Sequence[] | undefined>;
    setExpirations(context: string, expirations: Expiration[]): Promise<void>;
    getExpirations(context: string): Promise<Expiration[] | undefined>;
}
//# sourceMappingURL=storage.d.ts.map