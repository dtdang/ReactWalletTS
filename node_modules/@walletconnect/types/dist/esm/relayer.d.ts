import { Logger } from "pino";
import { IKeyValueStorage, KeyValueStorageOptions } from "keyvaluestorage";
import { IJsonRpcProvider, JsonRpcPayload, IEvents } from "@walletconnect/jsonrpc-types";
import { IRelayerStorage } from "./storage";
import { ISubscriber } from "./subscriber";
import { IJsonRpcHistory } from "./history";
import { IHeartBeat } from "./heartbeat";
import { IPublisher } from "./publisher";
export declare namespace RelayerTypes {
    interface ProtocolOptions {
        protocol: string;
        params?: any;
    }
    interface PublishOptions {
        relay: ProtocolOptions;
        ttl?: number;
        prompt?: boolean;
    }
    interface SubscribeOptions {
        relay: ProtocolOptions;
    }
    interface UnsubscribeOptions {
        id?: string;
        relay: ProtocolOptions;
    }
    type RequestOptions = PublishOptions | SubscribeOptions | UnsubscribeOptions;
    interface PayloadEvent {
        topic: string;
        payload: JsonRpcPayload;
    }
}
export declare abstract class IRelayerEncoder {
    abstract encode(topic: string, payload: JsonRpcPayload, nonce?: number | string): Promise<string>;
    abstract decode(topic: string, encrypted: string, nonce?: number | string): Promise<JsonRpcPayload>;
}
export interface RelayerOptions {
    heartbeat?: IHeartBeat;
    encoder?: IRelayerEncoder;
    storage?: IRelayerStorage;
    keyValueStorage?: IKeyValueStorage;
    keyValueStorageOptions?: KeyValueStorageOptions;
    logger?: string | Logger;
    rpcUrl?: string;
    projectId?: string;
    relayProvider?: string | IJsonRpcProvider;
}
export declare abstract class IRelayer extends IEvents {
    abstract logger: Logger;
    abstract storage: IRelayerStorage;
    abstract heartbeat: IHeartBeat;
    abstract encoder: IRelayerEncoder;
    abstract subscriber: ISubscriber;
    abstract publisher: IPublisher;
    abstract history: IJsonRpcHistory;
    abstract provider: IJsonRpcProvider;
    abstract name: string;
    abstract readonly context: string;
    abstract readonly connected: boolean;
    abstract readonly connecting: boolean;
    constructor(opts?: RelayerOptions);
    abstract init(): Promise<void>;
    abstract publish(topic: string, payload: JsonRpcPayload, opts?: RelayerTypes.PublishOptions): Promise<void>;
    abstract subscribe(topic: string, opts?: RelayerTypes.SubscribeOptions): Promise<string>;
    abstract unsubscribe(topic: string, opts?: RelayerTypes.UnsubscribeOptions): Promise<void>;
}
//# sourceMappingURL=relayer.d.ts.map